// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // uncomment next line if you use Prisma <5.10
  // directUrl = env("DATABASE_URL_UNPOOLED")
}

model Message {
  id             String       @id @default(uuid())
  type           String       @db.VarChar(10)
  content        String
  timestamp      DateTime     @default(now())
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  conversationId String
}

model Conversation {
  id                   String                @id @default(uuid())
  toolUsed             String[]
  messageList          Message[]
  tokenUsages          ModelTokenUsage[] // One conversation might use multiple models
  conversationFeedback ConversationFeedback?
}

//Token Usage of each LLM model
model ModelTokenUsage {
  id               String        @id @default(uuid())
  llmModelName     String
  completionTokens Int
  promptTokens     Int
  totalTokens      Int
  conversation     Conversation? @relation(fields: [conversationId], references: [id])
  conversationId   String
}

model Building {
  id       String @id
  name     String
  roomList Room[]
}

model Room {
  id         String   @id
  codeName   String   @unique @db.VarChar(10)
  capacity   Int
  building   Building @relation(fields: [buildingId], references: [id])
  buildingId String
}

model ConversationFeedback {
  id             String       @id @default(uuid())
  rating         Int
  userComment    String
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  conversationId String       @unique
}
